//S: CONSTANTES que se usan en la represenacion CERTA
//FROM: ./src/com/enerminds/metamodel/helpers/Certa.java

CERTA_SYSVAR_XMIN = 1008;
CERTA_SYSVAR_YMIN = 1009;
CERTA_SYSVAR_XMAX = 1010;
CERTA_SYSVAR_YMAX = 1011;
CERTA_SYSVAR_SIZE = 1012;   

// enum GraphicStyleType 
CERTA_GRAPHIC_STYLE = 0;
CERTA_PUNCTUAL_GRAPHIC_STYLE = 1;
CERTA_LINEAR_GRAPHIC_STYLE = 2;
CERTA_PROXY_GRAPHIC_STYLE = 3;

//   The first layer of abstraction, UsrObject uses 0 identification 
CERTA_USROBJECT_ID    = 0x00;

//   The first layer of abstraction below UsrObject uses bits 0-1 for identification 
//  (allowing for 2^2 = 4 objects at this layer)
CERTA_USRLAYER1_MASK    = 0x03;

CERTA_USRSUBENT_ID    = 0x01;    // These have USROBJECT_ID as their base...
CERTA_USRENTITY_ID    = 0x02;    
CERTA_USRUNUSED1_ID    = 0x03;
CERTA_USRUNUSED2_ID    = 0x00;

//   The second layer of abstraction below UsrObject uses bits 2-4 for identification
//  (allowing for (2^3)*4 = 32 objects at this layer.)
//   These have USRENTITY_ID as their base...
CERTA_USRLAYER2_MASK    = 0x1C;

//  const idtype  USRSYMBOL_ID    = 0x04 | USRENTITY_ID;    // These have USRENTITY_ID as their base...
//  const idtype  USRCONNECTOR_ID    = 0x08 | USRENTITY_ID; 
//  const idtype  USRENTITYMANAGER_ID  = 0x0C | USRENTITY_ID;
//  const idtype  USRENTITYPROXY_ID  = 0x10 | USRENTITY_ID;
CERTA_USRUNUSED0      = 0x00 | CERTA_USRENTITY_ID;
CERTA_USRUNUSED1      = 0x14 | CERTA_USRENTITY_ID;
CERTA_USRUNUSED2      = 0x18 | CERTA_USRENTITY_ID;
CERTA_USRUNUSED3      = 0x1C | CERTA_USRENTITY_ID;
CERTA_USRUNUSED4      = 0x14 | CERTA_USRENTITY_ID;

//   These have USRSUBENT_ID as their base...
CERTA_USRCIRCLESUB_ID    = 0x04 | CERTA_USRSUBENT_ID;    // These have USRSUBENT_ID as their base...
CERTA_USRARCSUB_ID    = 0x08 | CERTA_USRSUBENT_ID;
CERTA_USRLINESUB_ID    = 0x0C | CERTA_USRSUBENT_ID;
CERTA_USRPOLYLINESUB_ID  = 0x10 | CERTA_USRSUBENT_ID;
CERTA_USRSOLIDSUB_ID    = 0x14 | CERTA_USRSUBENT_ID;
CERTA_USRTEXTSUB_ID    = 0x18 | CERTA_USRSUBENT_ID;

CERTA_USRUNUSEDSUB1    = 0x1C | CERTA_USRSUBENT_ID;
CERTA_USRUNUSEDSUB2    = 0x14 | CERTA_USRSUBENT_ID;

//   etc...
//   This method of identification allows for 'is-derived-from' run-time queries..eg.
//   #define IS_COMPOSITE( id )  ((id) && USRLAYER1_MASK == USRENTITY_ID)
//   dSoftUsrObject *obj = object_in_question;
//   if ( IS_COMPOSITE( obj->isA() ) 
//   { ...
//   
//   while still allowing exact run-time queries like 
//   if ( obj->isA() == dSoftUsrCircleSubEnt::desc() )
//   { ...

//#define CLASS_END  (-9999)

//              unsigned long  dSoftUsrEntity::flags  
//  bit 31                                                                         bit 0
//   +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
//   |   dSoftUsrSymbol/Connector options    |    dSoftUsrEntity options           |
//   +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

//   FLAG BITS
CERTA_USRENT_FLAGS_NULL            = 0x00000000;
CERTA_USRENT_FLAGS_LOADED        = 0x00000001; //BITNUM 0
CERTA_USRENT_FLAGS_INFRASTRUCTURE    = 0x00000002; //BITNUM 1 => If ON, is an infrastructure entity
CERTA_USRENT_FLAGS_SWITCHABLE      = 0x00000100; //BITNUM 8
CERTA_USRENT_FLAGS_MESHEDMASK      = 0x00000200; //BITNUM 9

CERTA_USRSYM_FLAGS_SWITCHABLE      = 0x00000100; //BITNUM 8
CERTA_USRSYM_FLAGS_MESHEDMASK      = 0x00000200; //BITNUM 9
CERTA_USRSYM_FLAGS_NODEPOINTS      = 0x00010000; //BITNUM 16

CERTA_USRSYM_FLAGS_CUTTINGNODES        = 0x00020000; //BITNUM 17
CERTA_USRSYM_FLAGS_CUTTINGNODES_ALWAYS   = 0x00040000; //BITNUM 18
CERTA_USRSYM_FLAGS_ROTATE_ALWAYS        = 0x00080000; //BITNUM 19
CERTA_USRSYM_FLAGS_ROTATE_CONECTOR       = 0x00100000; //BITNUM 20
CERTA_USRSYM_FLAGS_ROTATE_AUXLINE    = 0x00200000; //BITNUM 21
CERTA_USRSYM_FLAGS_ROTATE_MANZANA    = 0x00400000; //BITNUM 22
CERTA_USRSYM_FLAGS_ANGLE_BIT1      = 0x00800000; //BITNUM 23
CERTA_USRSYM_FLAGS_ANGLE_BIT2      = 0x01000000; //BITNUM 24
CERTA_USRSYM_FLAGS_ANGLE_BIT3      = 0x02000000; //BITNUM 25

//////////////////////////////////////////////////////////////////////////////////  //
//
//    S U B E N T  Constants....
//
//////////////////////////////////////////////////////////////////////////////////  //
//              unsigned long  dSoftUsrSubEnt::flags  
//  bit 31                                 bit 7                                   bit 0
//   +--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+--+-+
//   |  dSoftCircle/Arc/Line/Pline options   |    dSoftUsrSubEntity options        |
//   +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
CERTA_SUBENT_FLAGS_NULL    = 0x00000000;
CERTA_SUBENT_FLAGS_HASVERTICES = 0x00001000; // WARNING: does not follow convention

//  +bit7---+---6---+---5---+----4----+----3---+----2---+----1----+----0---+
//  |    |    |    |HASVERTS |PLINEGEN|ISCLOSED|ISSPLINED|VARWIDTH|
CERTA_SUBPLY_FLAGS_VARWIDTH  = 0x00000100;
CERTA_SUBPLY_FLAGS_SPLINED      = 0x00000200;
CERTA_SUBPLY_FLAGS_CLOSED    = 0x00000400;
CERTA_SUBPLY_FLAGS_PLINEGEN  = 0x00000800;
CERTA_SUBPLY_FLAGS_HASVERTICES = 0x00001000; // WRNING: See above

//#define VARIABLE_WIDTH(i)  ((i & SUBPLY_FLAGS_VARWIDTH) ==SUBPLY_FLAGS_VARWIDTH)
//#define IS_SPLINED(i)    ((i & SUBPLY_FLAGS_SPLINED)  ==SUBPLY_FLAGS_SPLINED )

CERTA_SUBTXT_FLAGS_ACTIVETXT  = 0x00000100; // Flag para definir si esta subentidad de texto es un link a datos..... Controla si este texto se muestra en el worlddraw de su padre.
CERTA_SUBTXT_FLAGS_NOROTATE  = 0x00000200;


//////////////////////////////////////////////////////////////////////////////////  //
//
//    I N F R A S T R U C T U R E   S U B E N T  Constants....
//
//////////////////////////////////////////////////////////////////////////////////  //
//              unsigned long  SprLibSprInfraSubEntsRecord::flags  
CERTA_INFRASTRUCTURESUBENT_FLAGS_NULL        = 0x00000000;
CERTA_INFRASTRUCTURESUBENT_FLAGS_INSERT_AUTO = 0x00000001;
CERTA_INFRASTRUCTURESUBENT_FLAGS_RELATE_AUTO = 0x00000002;  

